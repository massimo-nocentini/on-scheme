

(import chicken scheme)

(use srfi-1 srfi-13)
(use test numbers)

(use commons streams microkanren reasoned-schemer)

(test-group "Vars generation"
 (test-fail (equal? (V 'V0) (V/gensym)))
 (test-fail (equal? (V 'V₁) (V/gensym)))
 (test-fail (equal? (V/gensym) (V/gensym)))
 (test 'V₄ (variable->symbol (V/gensym)))
 (test 'V₅ (variable->symbol (V/gensym))))

(test-group "Tautologies"
 (test '()  (stream:->list (run ✗)))
 (test-fail (run/with-symbols #t ✗))
 (test '((#t 0)) (stream:->list (run ✓)))
 (test-assert (run/with-symbols #t ✓))
 (test '() (stream:->list (run (≡ 2 3))))
 (test-fail (run/with-symbols #t (≡ 2 3)))
 (test '(#t) (run/with-symbols ∞ (≡ 3 3)))
 (test '() (run/with-symbols ∞ (fresh (v) ✗)))
 (test '(#t) (run/with-symbols ∞ (fresh (v) ✓)))
 (test '(#t) (run/with-symbols ∞ (fresh (v) (≡ v 3))))
 (test '() (run/with-symbols ∞ (fresh (v) (∧ (≡ v 3) (≡ v 4))))))

(test-group "Vars, ≡ and sharing"
 (test '(3) (run/with-symbols ∞ (v) (≡ v 3)))
 (test '(3) (run/with-symbols ∞ (v) (≡ 3 v)))
 (test '(3) (run/with-symbols ∞ (v) (≡ '(3 4) `(,v 4))))
 (test (list `(,(R '▢ 0) 0)) (stream:->list (run (v) ✓)))
 (test '(▢₀) (run/with-symbols ∞ (v) ✓))
 (test '((▢₀ ▢₁)) (run/with-symbols ∞ (v w) ✓))
 (test '((▢₀ ▢₀)) (run/with-symbols ∞ (v w) (≡ v w)))
 (test '((▢₀ (((▢₀))))) (run/with-symbols ∞ (v w) (≡ `(((,v))) w))))

(test-group "Lists destructuring relations"
 (test '(())
  (run/with-symbols ∞ (v) (nullº v)))
 (test '(0)
  (run/with-symbols ∞ (l) (carº '(0 1 2 3) l)))
 (test '((1 2 3))
  (run/with-symbols ∞ (l) (cdrº '(0 1 2 3) l)))
 (test '((3 4))
  (run/with-symbols ∞ (v w) (consº v 4 `(3 . ,w))))
 (test '(#t)
  (run/with-symbols ∞ (fresh (w) (pairº `(3 . ,w)))))
 (test '((▢₀ . ▢₁))
  (run/with-symbols ∞ (w) (pairº w))))


(test-group "listº"
 (test '()
  (run/with-symbols ∞ (listº 3)))
 (test '(#t)
  (run/with-symbols ∞ (listº '())))
 (test '(#t)
  (run/with-symbols ∞ (listº '())))
 (test '(#t)
  (run/with-symbols ∞ (listº '(3 4))))
 (test '(() (▢₀) (▢₀ ▢₁) (▢₀ ▢₁ ▢₂) (▢₀ ▢₁ ▢₂ ▢₃))
  (run/with-symbols 5 (l) (listº l))))

(test '(tea cup)
 (run/with-symbols ∞ (v) (tea-cupº v)))
(test '((split pea) (red bean))
 (run/with-symbols ∞ (v w) (split-peaº v w)))
(test '((tea ▢₀) (#f tea) (cup ▢₀) (#f cup))
 (run/with-symbols ∞ (v w) (split-pea₁º v w)))


(test-group "appendº"
 (test-assert
  (run/with-symbols #t (appendº '(0 1 2) '(3 4 5) '(0 1 2 3 4 5))))
 (test '(#t)
  (run/with-symbols ∞ (appendº '(0 1 2) '(3 4 5) '(0 1 2 3 4 5))))
 (test '((0 1 2 3 4 5))
  (run/with-symbols ∞ (v) (appendº '(0 1 2) '(3 4 5) v)))
 (test '((() (0 1 2 3 4 5))
         ((0) (1 2 3 4 5))
         ((0 1) (2 3 4 5))
         ((0 1 2) (3 4 5))
         ((0 1 2 3) (4 5))
         ((0 1 2 3 4) (5))
         ((0 1 2 3 4 5) ()))
  (run/with-symbols ∞ (v w) (appendº v w '(0 1 2 3 4 5))))
 (test '(((0 1 2 3 4 5) ())
         ((1 2 3 4 5) (0))
         ((2 3 4 5) (0 1))
         ((3 4 5) (0 1 2))
         ((4 5) (0 1 2 3))
         ((5) (0 1 2 3 4))
         (() (0 1 2 3 4 5)))
  (run/with-symbols ∞ (v w) (appendº w v '(0 1 2 3 4 5)))))

  (test '(()
          (○ ●)
          (○ ○ ● ●)
          (○ ● ○ ●)
          (○ ○ ○ ● ● ●)
          (○ ● ○ ○ ● ●)
          (○ ○ ● ● ○ ●)
          (○ ● ○ ● ○ ●)
          (○ ○ ● ○ ● ●)
          (○ ● ○ ○ ○ ● ● ●)
          (○ ○ ● ● ○ ○ ● ●)
          (○ ● ○ ● ○ ○ ● ●)
          (○ ○ ○ ● ● ● ○ ●)
          (○ ● ○ ○ ● ● ○ ●)
          (○ ○ ● ● ○ ● ○ ●)
          (○ ● ○ ● ○ ● ○ ●)
          (○ ○ ○ ○ ● ● ● ●)
          (○ ● ○ ○ ● ○ ● ●)
          (○ ○ ● ● ○ ○ ○ ● ● ●)
          (○ ● ○ ● ○ ○ ○ ● ● ●)
          (○ ○ ○ ● ● ● ○ ○ ● ●)
          (○ ● ○ ○ ● ● ○ ○ ● ●)
          (○ ○ ● ● ○ ● ○ ○ ● ●)
          (○ ● ○ ● ○ ● ○ ○ ● ●)
          (○ ○ ● ○ ● ● ○ ●)
          (○ ● ○ ○ ○ ● ● ● ○ ●)
          (○ ○ ● ● ○ ○ ● ● ○ ●)
          (○ ● ○ ● ○ ○ ● ● ○ ●)
          (○ ○ ○ ● ● ● ○ ● ○ ●)
          (○ ● ○ ○ ● ● ○ ● ○ ●)
          (○ ○ ● ● ○ ● ○ ● ○ ●)
          (○ ● ○ ● ○ ● ○ ● ○ ●)
          (○ ○ ● ○ ○ ● ● ●)
          (○ ● ○ ○ ○ ○ ● ● ● ●)
          (○ ○ ● ● ○ ○ ● ○ ● ●)
          (○ ● ○ ● ○ ○ ● ○ ● ●)
          (○ ○ ○ ● ● ● ○ ○ ○ ● ● ●)
          (○ ● ○ ○ ● ● ○ ○ ○ ● ● ●)
          (○ ○ ● ● ○ ● ○ ○ ○ ● ● ●)
          (○ ● ○ ● ○ ● ○ ○ ○ ● ● ●)
          (○ ○ ● ○ ● ● ○ ○ ● ●)
          (○ ● ○ ○ ○ ● ● ● ○ ○ ● ●))
   (run/with-symbols 42 (α) (dyckº α)))

    (test '((() 1) 
            ((○ ●) 5) 
            ((○ ○ ● ●) 11) 
            ((○ ● ○ ●) 9) 
            ((○ ○ ○ ● ● ●) 19) 
            ((○ ● ○ ○ ● ●) 15) 
            ((○ ○ ● ● ○ ●) 15) 
            ((○ ● ○ ● ○ ●) 13) 
            ((○ ○ ● ○ ● ●) 17) 
            ((○ ● ○ ○ ○ ● ● ●) 23) 
            ((○ ○ ● ● ○ ○ ● ●) 21) 
            ((○ ● ○ ● ○ ○ ● ●) 19) 
            ((○ ○ ○ ● ● ● ○ ●) 23) 
            ((○ ● ○ ○ ● ● ○ ●) 19) 
            ((○ ○ ● ● ○ ● ○ ●) 19) 
            ((○ ● ○ ● ○ ● ○ ●) 17) 
            ((○ ○ ○ ○ ● ● ● ●) 29) 
            ((○ ● ○ ○ ● ○ ● ●) 21) 
            ((○ ○ ● ● ○ ○ ○ ● ● ●) 29) 
            ((○ ● ○ ● ○ ○ ○ ● ● ●) 27) 
            ((○ ○ ○ ● ● ● ○ ○ ● ●) 29) 
            ((○ ● ○ ○ ● ● ○ ○ ● ●) 25) 
            ((○ ○ ● ● ○ ● ○ ○ ● ●) 25) 
            ((○ ● ○ ● ○ ● ○ ○ ● ●) 23) 
            ((○ ○ ● ○ ● ● ○ ●) 21) 
            ((○ ● ○ ○ ○ ● ● ● ○ ●) 27) 
            ((○ ○ ● ● ○ ○ ● ● ○ ●) 25) 
            ((○ ● ○ ● ○ ○ ● ● ○ ●) 23) 
            ((○ ○ ○ ● ● ● ○ ● ○ ●) 27) 
            ((○ ● ○ ○ ● ● ○ ● ○ ●) 23) 
            ((○ ○ ● ● ○ ● ○ ● ○ ●) 23) 
            ((○ ● ○ ● ○ ● ○ ● ○ ●) 21) 
            ((○ ○ ● ○ ○ ● ● ●) 25) 
            ((○ ○ ● ● ○ ○ ● ○ ● ●) 27) 
            ((○ ● ○ ● ○ ○ ● ○ ● ●) 25) 
            ((○ ○ ● ○ ● ● ○ ○ ● ●) 27) 
            ((○ ● ○ ● ○ ○ ● ● ○ ○ ● ●) 29) 
            ((○ ● ○ ○ ● ● ○ ● ○ ○ ● ●) 29) 
            ((○ ○ ● ● ○ ● ○ ● ○ ○ ● ●) 29) 
            ((○ ● ○ ● ○ ● ○ ● ○ ○ ● ●) 27) 
            ((○ ● ○ ○ ● ○ ● ● ○ ●) 25) 
            ((○ ● ○ ○ ● ● ○ ○ ● ● ○ ●) 29) 
            ((○ ○ ● ● ○ ● ○ ○ ● ● ○ ●) 29) 
            ((○ ● ○ ● ○ ● ○ ○ ● ● ○ ●) 27) 
            ((○ ○ ● ○ ● ● ○ ● ○ ●) 25) 
            ((○ ○ ● ● ○ ○ ● ● ○ ● ○ ●) 29) 
            ((○ ● ○ ● ○ ○ ● ● ○ ● ○ ●) 27) 
            ((○ ● ○ ○ ● ● ○ ● ○ ● ○ ●) 27) 
            ((○ ○ ● ● ○ ● ○ ● ○ ● ○ ●) 27) 
            ((○ ● ○ ● ○ ● ○ ● ○ ● ○ ●) 25) 
            ((○ ○ ○ ● ● ○ ● ●) 25) 
            ((○ ● ○ ○ ● ○ ○ ● ● ●) 29) 
            ((○ ● ○ ● ○ ● ○ ○ ● ○ ● ●) 29) 
            ((○ ○ ● ○ ○ ● ● ● ○ ●) 29) 
            ((○ ● ○ ● ○ ○ ● ○ ● ● ○ ●) 29) 
            ((○ ● ○ ○ ● ○ ● ● ○ ● ○ ●) 29) 
            ((○ ○ ● ○ ● ● ○ ● ○ ● ○ ●) 29) 
            ((○ ● ○ ● ○ ● ○ ● ○ ● ○ ● ○ ●) 29) 
            ((○ ○ ● ○ ● ○ ● ●) 23) 
            ((○ ● ○ ○ ○ ● ● ○ ● ●) 29) 
            ((○ ○ ○ ● ● ○ ● ● ○ ●) 29) 
            ((○ ○ ○ ● ○ ● ● ●) 27) 
            ((○ ● ○ ○ ● ○ ● ○ ● ●) 27) 
            ((○ ○ ● ○ ● ○ ● ● ○ ●) 27))
    (run/with-symbols ↓ 64 (α) ((deepening 30) (dyckº α))))

;(time (run/with-symbols 1000 (α) (dyckº α)))

    (test '((1)
            (1 1)
            (1 2 1)
            (1 3 3 1)
            (1 4 6 4 1)
            (1 5 10 10 5 1)
            (1 6 15 20 15 6 1)
            (1 7 21 35 35 21 7 1)
            (1 8 28 56 70 56 28 8 1))
     (map (lambda (n)
           ((○
             (fmap cadr)
             (lambda (l) (sort l (lambda (p q) (< (car p) (car q)))))
             (group identity (lambda (p) (list (car p) (length (cdr p))))))
            (car (run/with-symbols ∞ (α) (fibonacciº n 2 α)))))
      (list-tabulate 9 identity)))

